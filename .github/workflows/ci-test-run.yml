name: ci build

on: [pull_request, workflow_dispatch]

jobs:
  ubuntu-host:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: |
          { printf '/.tools/*.exe export-ignore
            /.tools/*.dll export-ignore'
          } >${{ github.workspace }}/.git/info/attributes
          git archive HEAD --output release-linux.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          name: release-linux
          path: ./release-linux.tar.gz

      - run: |
          { printf '/.tools/7zzs export-ignore
            /.tools/curl-amd64 export-ignore
            /.tools/pcre2grep export-ignore'
          } >${{ github.workspace }}/.git/info/attributes
          git archive HEAD --output release-win.zip
      - uses: actions/upload-artifact@v3
        with:
          name: release-win
          path: ./release-win.zip

      - name: ci test-run
        run: |
          sudo apt install -y dos2unix
          .tests/ci-test-run.sh

  ubuntu-host-create:
    needs: ubuntu-host
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: External test-run
        run: .tests/test-run.sh -- testExternalCreate

  alpine-docker:
    runs-on: ubuntu-latest
    container: alpine:3.15.0

    steps:
      - uses: actions/checkout@v2

      - name: ci test-run
        run: |
          apk add --no-cache bash
          .tests/ci-test-run.sh

  windows-host:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: ci test-run
        shell: cmd
        run: call .tests\ci-test-run.bat

  windows-host-create:
    needs: windows-host
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: External test-run
        shell: cmd
        run: call .tests\test-run.bat testExternalCreate

  nanoserver-docker:
    runs-on: windows-2022
    env:
      IMAGE_NAME: mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64
    steps:
      - uses: actions/checkout@v2
      - name: pull windows container ${{ env.IMAGE_NAME }}
        run: |
          docker pull ${{ env.IMAGE_NAME }}
          docker images ${{ env.IMAGE_NAME }}

      - name: Internal test-run
        run: docker container run --rm -v ${{ github.workspace }}:C:\app -w C:\app ${{ env.IMAGE_NAME }} C:\app\.tests\ci-test-run.bat

  self-release:
    needs: [alpine-docker,
            nanoserver-docker,
            ubuntu-host-create,
            windows-host-create]
    uses: ./.github/workflows/release.yml
    with:
      workflow: 'latest'
      tool_version: 'master'
      prepare_body: |
        { echo version: "$(git rev-list --count HEAD)"."$(git show --abbrev=10 --no-patch --pretty=%h HEAD)"
        } >body.md
        git push origin :refs/tags/latest-master
      artifacts: ./release-linux/release-linux.tar.gz,./release-win/release-win.zip
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
